/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.09.2023 00:30:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1936;
#else
constexpr int kTensorArenaSize = 912;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,24 } };
const TfArray<1, float> quant0_scale = { 1, { 2605.797607421875, } };
const TfArray<1, int> quant0_zero = { 1, { -124 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { 12, 2, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 1, 12, 15, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data3[2] = { -1, 300, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data4[4] = { 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 1.1114413738250732, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[4*300] = { 
  16, 13, 15, -13, -2, -11, -3, -2, 13, 3, 17, -1, -13, 12, -11, -13, 7, 3, -13, 15, 8, -24, -6, -5, -4, 2, 12, 9, -17, 14, -6, -10, -2, 4, -5, -3, 5, -2, -13, -20, 1, -18, -4, 2, -3, 1, -9, -7, 8, 5, 9, 8, 14, -1, -8, -5, -1, -2, 12, -13, -4, 2, 5, 14, -17, -9, -1, 0, -14, 1, 13, -7, -9, 1, 2, -11, -21, -1, -1, -8, -4, -5, -3, 9, -2, -1, 20, 8, 6, 25, 11, -2, -9, -4, 0, -21, 2, 2, 5, 5, -1, -2, 3, -15, -2, 19, -11, -6, 3, 8, 19, 18, 18, 8, -4, -3, -5, 4, 0, -3, 12, -4, 19, 1, -3, 1, -1, -8, 0, 3, 2, -9, 3, 1, 12, -2, 19, 9, 3, 0, -4, -14, 10, 8, 13, -9, 3, 18, 0, 16, -5, -6, 4, 1, -13, 1, 9, -11, 8, 7, 0, 10, 6, 23, -1, -4, 4, -13, -9, 11, 13, 6, -9, 6, 21, 5, 40, -5, -5, 0, 5, 22, -12, 19, 9, 12, -4, -14, 6, 14, 2, -11, 12, 2, 7, 2, -16, 7, -19, 14, -5, 19, 3, 12, -3, 26, 9, 9, 1, 11, -11, 19, 21, 22, -4, 10, -5, 4, 5, -3, 9, 16, 9, -11, 9, 1, -40, -28, -15, 10, -15, -14, -16, 7, -20, -5, -14, 27, -27, -9, 4, 18, -4, -4, -17, -27, -13, 3, -27, 18, -59, 11, 70, -4, 24, 10, 51, 50, 58, -1, 33, 16, -17, 18, -18, 28, 40, 33, 23, 49, 88, 37, 64, 19, 44, 19, -16, -127, 41, 34, -70, 37, -53, -15, 42, -61, 12, -18, -35, 32, -56, -52, 20, -18, -88, -24, -64, 80, -21, 58, 
  7, -3, -11, -16, 2, -12, 8, 3, 2, -1, 2, 4, -10, -5, 0, 15, 1, 3, -2, 23, -9, -7, 1, -13, 7, -6, -1, 7, -1, 12, -4, -7, 5, 1, -1, -4, 3, -21, -4, 10, -13, 16, -9, 7, 0, 8, -10, -13, 17, 12, 15, 14, 0, -16, -8, -2, 10, 5, 10, 7, -12, 0, -2, 4, 11, -1, 5, 11, 5, 2, 9, 2, -13, 9, 10, -5, 3, 12, 6, -8, -5, -2, -12, 16, -9, -3, -18, 6, 11, -3, 1, -8, -13, -10, 4, -15, -11, 1, 1, -4, -11, -3, -9, 3, 4, 8, 3, -5, -7, -10, 8, -13, 13, -14, -5, 16, -1, -16, 0, 0, 3, 3, 12, 5, 9, -6, -3, -10, 7, 4, 1, 0, 6, -4, 10, -7, -11, 7, 0, 16, 0, 2, 2, 8, 11, -6, 9, 18, 8, 19, -2, 0, -8, -1, 10, 4, 2, -6, 19, -5, 1, 2, 1, -3, -5, -5, 8, 9, -16, 2, 12, 5, 2, -23, 22, -22, -18, 23, -16, -14, -12, 3, -13, -6, -12, 9, -14, 5, 24, 24, -25, 4, -3, -4, 12, -39, 7, -24, -1, 9, -1, -23, -28, 2, -3, -7, -5, 4, -4, -25, 1, -5, -25, -12, -12, 0, -2, 6, -22, -16, -28, 2, -2, -21, -11, -12, 44, 12, 6, -3, -1, 6, 17, 11, 16, -11, -16, -22, 4, 11, 7, 33, 10, 9, -1, 26, 22, 21, -7, -16, 18, -17, -44, 1, 40, -56, -77, 24, 11, 15, -19, -21, -7, -39, 2, -18, -47, 0, -2, 38, -15, -61, 60, -20, 27, 55, -25, 83, -28, -116, 71, -72, 106, -106, 14, -76, 16, -30, -9, 27, 31, -19, -57, -13, -60, 112, -38, -77, -44, 23, 
  -6, 13, -6, -10, 4, -15, 12, 2, 1, -6, 8, 10, 14, 4, 22, 14, 21, -7, -17, 5, 15, 9, 8, -3, -2, -6, 4, 1, -22, 9, -2, 0, 1, 4, 12, -9, -1, -11, 8, -1, -2, -10, 3, 15, 3, 0, -4, -6, 10, 7, 4, 8, -5, 4, -3, -8, 16, 6, 3, -14, -16, 16, -4, -6, 9, 5, 17, -4, 0, 3, 5, 1, -12, 4, 16, -7, -2, -2, 15, -5, -9, 4, -9, 8, -14, -5, 15, -2, -8, 14, 9, 5, -25, -8, 0, -19, -1, -12, 11, 8, -8, 0, -6, 10, 1, 10, 4, -6, -4, -8, 12, 4, 3, -9, -11, 3, 15, -20, 2, 0, 6, -5, 5, 7, 8, -2, 3, -2, 7, 4, 4, -2, 6, 3, 14, -2, -11, 0, 6, 1, -11, 6, 7, 12, 16, -7, -7, 15, -1, 19, 1, 22, 12, -5, 18, -6, -4, -16, 2, -4, -14, -6, 19, -7, 10, 14, 12, 18, -2, 2, 17, -13, 13, -2, 18, -14, -10, -21, -22, -15, -11, -31, 10, 6, -19, 4, 21, -6, 13, -6, -10, -28, -18, -6, 1, -2, 1, -5, -15, 0, 13, -14, -9, 3, -8, 12, -12, -16, 15, -29, -7, -16, -14, -12, -16, -25, -7, 7, -23, -21, -6, -11, -17, -21, -21, -1, 2, 18, 10, 6, -5, -18, 1, -15, 16, -2, 13, -24, 7, 29, 11, -7, 19, 15, -9, 13, 3, 9, -5, 11, -17, 20, 68, -14, -2, 38, 60, -3, -23, -45, 38, 13, 26, 17, 18, 4, 35, 27, 13, 13, -1, 39, -100, 37, -46, -6, 34, -27, 50, 78, -81, 17, -62, 92, -44, 40, -7, 25, -27, 1, 1, -1, 7, -22, 95, -95, -3, 9, -9, -68, 
  -8, -2, -11, 3, 5, -19, 6, 6, -2, -16, 10, 8, 2, -6, 21, 15, 9, -9, -17, 15, 10, 7, 12, -9, 3, -12, -9, -1, -4, 11, -5, -12, 8, 0, -5, -2, 4, -5, -6, 10, -3, 5, -8, 1, -3, 11, 7, 2, 11, 7, 2, -11, -1, 5, -5, -8, 2, 8, 2, -17, -10, -4, -2, -5, 5, 5, 6, 1, -3, 10, 3, -2, -2, -1, 15, 12, 6, -5, -10, -15, 6, -1, -8, 21, 16, -2, -21, 0, 15, 7, -9, -7, 1, -1, 2, -14, 7, -4, 2, -10, 5, -7, -18, -9, -3, 16, -3, -5, 1, 8, 11, -4, -1, -6, -14, 1, 2, -4, 8, 1, -2, 4, 5, 0, 7, -7, -1, -15, 7, 3, -6, 1, -2, -2, 3, -7, 16, 8, 1, -14, 4, -6, -3, 6, 13, -13, 10, 10, 6, 20, 23, 0, -3, -2, 8, -6, -24, -17, -1, -9, -13, -15, -7, -6, -5, 5, -1, 4, -10, 3, -10, -9, 12, -24, 10, 14, 38, 23, 20, 10, 26, 26, 6, -11, 21, -10, -7, 21, 18, 22, -7, 23, 5, -1, 1, 1, 5, 30, 24, -2, 13, 12, 14, -13, -17, -7, 3, -13, -8, -5, -16, 2, 12, 19, -10, 20, 1, 20, -5, -16, -4, 20, 1, 27, -6, 19, -11, 12, -10, -11, -4, 19, -6, 14, 20, -6, -9, 12, -21, -8, -23, -12, -11, 13, 8, 8, -17, -15, -21, 3, 37, 4, -84, -7, -90, -1, -7, -31, -76, 6, -29, -6, 8, 19, -24, 14, -22, -26, -2, -107, -102, -34, -29, -23, -3, -41, 6, 33, -62, -12, -36, 37, -48, -52, 4, 36, 14, 30, 16, -26, 5, 2, -3, 10, -32, -67, 13, -45, 43, -35, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,300 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0065503218211233616, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[25] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 25 } };
const TfArray<1, float> quant6_scale = { 1, { 4.2252020835876465, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[25*15] = { 
  25, -58, 12, 62, 15, -55, -40, 31, 49, 13, 13, -15, 78, 4, -50, 
  -58, 46, 0, -8, -35, 45, 43, 2, -2, -1, 15, 94, 63, -9, -11, 
  -81, 67, -31, -110, 1, 82, -37, 0, -39, -46, -23, 71, -48, 47, 26, 
  4, 72, 40, -21, 36, 39, -8, 25, 63, 46, -44, -35, 31, 17, 4, 
  -107, -7, 30, -9, 29, -81, -42, 32, -53, -62, -49, -43, 0, -5, 46, 
  -115, 54, -56, -65, 32, 107, -38, -48, -68, 93, 7, -13, -103, -42, 26, 
  114, 70, 43, -11, 28, 59, -4, -24, -5, 23, 16, 17, -13, -45, -12, 
  -64, 119, 37, -81, -26, 45, 36, -50, 0, -36, 41, 31, -83, 19, -43, 
  -42, 8, 12, -13, 54, -75, 44, 61, 22, -14, -35, -69, -19, 44, -34, 
  70, -24, 36, -127, -8, -35, -19, 41, 42, -34, -33, 57, 15, 7, 38, 
  -14, 88, 53, -46, 5, 108, -5, -24, -57, 5, 27, 69, 48, -73, -13, 
  -63, -44, -29, -15, -29, -23, -28, -9, -33, -54, -39, -62, -11, -30, -24, 
  -35, 91, 6, 76, 14, 55, 38, 10, 46, -12, -30, 7, 45, -30, -2, 
  36, 38, 1, 9, 6, -30, -8, -6, 39, 40, 16, 49, 68, 7, -44, 
  2, 16, -9, 51, 32, -28, -14, 9, 12, -2, -14, 15, 52, 7, -30, 
  45, 66, 11, -6, 25, 61, -7, 16, 42, -46, -6, 53, 49, 39, -29, 
  27, 77, -4, 22, 12, 100, 28, -25, -12, 62, -39, 19, 19, 15, -1, 
  42, 12, 37, 4, 57, 53, 35, -39, 22, 34, -20, 98, -3, 6, 4, 
  38, -11, -72, 63, 9, 38, -42, 36, -43, 39, 26, 70, 72, 11, 5, 
  -113, -10, -12, 18, 27, -24, 0, 33, -42, 30, -29, -97, -17, 33, 8, 
  -92, 77, -39, -81, 16, 110, -13, 4, 15, 0, 31, 30, -107, 14, -15, 
  60, 74, -25, 18, 15, 50, 1, -7, -50, 72, -26, 89, -22, 38, 34, 
  -44, -27, 0, 2, -19, -89, -39, 37, 0, 44, 26, -49, 2, -33, 0, 
  106, 73, -40, 25, -35, 20, -37, -25, -29, 74, -4, 17, 41, -70, 34, 
  -107, 83, -6, -88, -21, 72, 37, 22, 50, 36, 24, -29, -97, -33, -40, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 25,15 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0059792501851916313, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 15 } };
const TfArray<1, float> quant8_scale = { 1, { 20.558107376098633, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[15*2] = { 
  -20, -15, 
  -127, 0, 
  17, -20, 
  -57, -103, 
  21, -22, 
  -94, -3, 
  6, -18, 
  19, -30, 
  9, 13, 
  -69, 11, 
  29, 6, 
  -53, -8, 
  -41, -95, 
  -1, 21, 
  25, 8, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 15,2 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0078893722966313362, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 12,2 } };
const TfArray<1, float> quant10_scale = { 1, { 2605.797607421875, } };
const TfArray<1, int> quant10_zero = { 1, { -124 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 12,15 } };
const TfArray<1, float> quant11_scale = { 1, { 706.6441650390625, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<3, int> tensor_dimension12 = { 3, { 1,12,15 } };
const TfArray<1, float> quant12_scale = { 1, { 706.6441650390625, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<3, int> tensor_dimension13 = { 3, { 1,12,25 } };
const TfArray<1, float> quant13_scale = { 1, { 169.6773681640625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,300 } };
const TfArray<1, float> quant14_scale = { 1, { 169.6773681640625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,4 } };
const TfArray<1, float> quant15_scale = { 1, { 113.74253082275391, } };
const TfArray<1, int> quant15_zero = { 1, { 104 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,4 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 10,9,8 } };
const TfArray<1, int> outputs1 = { 1, { 11 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 11,2 } };
const TfArray<1, int> outputs2 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, true, false };
const TfArray<3, int> inputs3 = { 3, { 12,7,6 } };
const TfArray<1, int> outputs3 = { 1, { 13 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 13,3 } };
const TfArray<1, int> outputs4 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 14,5,4 } };
const TfArray<1, int> outputs5 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 15 } };
const TfArray<1, int> outputs6 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension0, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 375, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension11, 180, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 180, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 304, (TfLiteIntArray*)&tensor_dimension13, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 304, (TfLiteIntArray*)&tensor_dimension15, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_66_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_66_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteStatus tflite_learn_66_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_66_invoke() {
  for (size_t i = 0; i < 7; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_66_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
